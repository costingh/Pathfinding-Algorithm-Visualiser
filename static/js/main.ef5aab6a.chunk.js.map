{"version":3,"sources":["Components/Node.js","Algorithms/dijkstra.js","helpers/helpers.js","Algorithms/a_star.js","Algorithms/breadthFirstSearch.js","Algorithms/depthFirstSearch.js","Components/InfoTab.js","Components/Navbar.js","Components/TimeTakenPanel.js","Components/SecondNavbar.js","Components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","isWall","onMouseUp","onMouseDown","onMouseEnter","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodes","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNeighbors","allowDiagonal","x","y","backtrackPath","nodesInShortestPathOrder","currentNode","unshift","heuristic","heuristicType","Math","abs","pow","d1","d2","max","sqrt","min","aStar","openList","closedList","lowInd","i","f","includes","gScore","g","gScoreIsBest","h","bfs","queue","visitedNodesInOrder","forEach","dfs","stack","pop","Infos","styled","div","Title","h1","Close","Description","InfoTab","offsetX","offsetY","handleHideInfos","move","e","el","target","style","left","pageX","top","pageY","clientX","getBoundingClientRect","clientY","addEventListener","removeEventListener","onClick","Navbar","clearPath","changeSpeed","runAlgorithm","changeAlgorithm","handleChangeHeuristic","handleChangeDiagonal","clearWalls","algorithmOptions","value","label","speedOptions","heuristicOptions","diagonalOptions","onChange","selectedOption","options","placeholder","defaultValue","Panel","TimeTakenPanel","timeTaken","parseFloat","toFixed","SecondNavbar","Grid","state","mouseIsPressed","running","animationSpeed","algorithm","finished","startRow","startColumn","finishRow","finishColumn","startNodeIsBeingDragged","finishNodeIsBeingDragged","showInfos","setState","getInitialGrid","newGrid","slice","element","document","querySelector","height","clientHeight","width","clientWidth","numberOfRows","floor","numberOfColumns","currentRow","createNode","startCoord","finishCoord","drawWall","startNodeIsMoving","previousStartNode","prevRow","parseInt","parentNode","split","prevCol","previousFinishNode","onDragRecomputation","getElementsByClassName","shortestPathNodes","classList","remove","getElementById","start","finish","window","performance","now","console","log","animateCurrentAlgorithm","alert","resetAll","calculatePath","setTimeout","animateShortestPath","animationDuration","callback","querySelectorAll","speed","name","val","bind","handleChangeSpeed","visualizeCurrentAlgorithm","handleChangeAlgorithm","map","rowIndex","nodeIndex","isComputing","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ef5aab6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../styles/Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseUp,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n    } = this.props;   \r\n\r\n    return (\r\n      <div\r\n        id={`Node-${row}-${col}`}\r\n        className={`Node ${isWall && 'Node-wall'}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      >\r\n        {isStart && <div id={'dragstart'}></div>}                               \r\n        {isFinish && <div id={'dragtarget'}></div>}      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\n\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodes = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while (unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();                               // The closest node is the first one in the list\r\n        if (closestNode.isWall) continue;                                        // If we encounter a wall, we skip it.\r\n        if (closestNode.distance === Infinity) return visitedNodes;             // If the closest node is at a distance of infinity, we should stop (no movement possibility)\r\n        closestNode.isVisited = true;\r\n        visitedNodes.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodes;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","\r\n/* const START_NODE_ROW = -1;\r\nconst START_NODE_COL = -1;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport const getInitialGrid = () => {\r\n    const heightApp = document.querySelector('.App').clientHeight;\r\n    const heightNavbar = document.querySelector('.navbar').clientHeight;\r\n    const height = heightApp - heightNavbar;\r\n    const width = document.querySelector('.App').clientWidth;\r\n    const numberOfRows = Math.floor(height / 40);\r\n    const numberOfColumns = Math.floor(width / 40);\r\n\r\n    const grid = [];\r\n    for (let row = 0; row < numberOfRows - 1; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < numberOfColumns; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nexport const createNode = (col, row) => {\r\n    const { grid } = this.state;\r\n    console.log(grid);\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nexport const drawWall = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    newGrid[row][col].isWall = !newGrid[row][col].isWall;\r\n    return newGrid;\r\n};\r\n\r\nexport const drawTargetNode = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    newGrid[row][col].isFinish = true;\r\n    return newGrid;\r\n};\r\n */\r\n\r\n\r\nexport function getNeighbors(node, grid, allowDiagonal) {\r\n    let neighbors = [];\r\n    let x = node.row;\r\n    let y = node.col;\r\n\r\n    // West\r\n    if(grid[x-1] && grid[x-1][y]) {\r\n        neighbors.push(grid[x-1][y]);\r\n    }\r\n    // East\r\n    if(grid[x+1] && grid[x+1][y]) {\r\n        neighbors.push(grid[x+1][y]);\r\n    }\r\n    // South\r\n    if(grid[x][y-1]) {\r\n        neighbors.push(grid[x][y-1]);\r\n    }\r\n    // North\r\n    if(grid[x][y+1]) {\r\n        neighbors.push(grid[x][y+1]);\r\n    }\r\n\r\n    if(allowDiagonal) {\r\n        // Southwest\r\n        if(grid[x-1] && grid[x-1][y-1]) {\r\n            neighbors.push(grid[x-1][y-1]);\r\n        }\r\n\r\n        // Southeast\r\n        if(grid[x+1] && grid[x+1][y-1]) {\r\n            neighbors.push(grid[x+1][y-1]);\r\n        }\r\n\r\n        // Northwest\r\n        if(grid[x-1] && grid[x-1][y+1]) {\r\n            neighbors.push(grid[x-1][y+1]);\r\n        }\r\n\r\n        // Northeast\r\n        if(grid[x+1] && grid[x+1][y+1]) {\r\n            neighbors.push(grid[x+1][y+1]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nexport function backtrackPath(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\n\r\n","import { getNeighbors } from '../helpers/helpers.js'\r\n\r\nfunction heuristic(nodeA, nodeB, heuristicType) {\r\n\r\n    // Manhattan distance\r\n    if(heuristicType === 'manhattan') {\r\n        let d1 = Math.abs(nodeB.row - nodeA.row);\r\n        let d2 = Math.abs(nodeB.col - nodeA.col);\r\n        return d1+d2;\r\n    }\r\n\r\n    /* Euclidean distance */\r\n    if(heuristicType === 'euclidean') {\r\n        let d1 = Math.pow(nodeB.row - nodeA.row,2);\r\n        let d2 = Math.pow(nodeB.col - nodeA.col,2);\r\n        return d1+d2;\r\n    }\r\n    \r\n    /* Diagonal distance */\r\n    if(heuristicType === 'diagonal') {\r\n        let d1 = Math.abs(nodeB.row - nodeA.row);\r\n        let d2 = Math.abs(nodeB.col - nodeA.col);\r\n        return Math.max(d1,d2) + (Math.sqrt(2)-1) * Math.min(d1,d2);\r\n    }\r\n}\r\n\r\nexport function aStar(grid, startNode, finishNode, heuristicType, allowDiagonal) {\r\n    let openList = [];\r\n    const closedList = []\r\n    let visitedNodes  = []\r\n\r\n    openList.push(startNode)\r\n\r\n    while (openList.length) {\r\n        let lowInd = 0;\r\n        for(let i=0; i<openList.length; i++) {\r\n            if(openList[i].f < openList[lowInd].f) {\r\n                lowInd = i;\r\n            }\r\n        }\r\n\r\n        let currentNode = openList[lowInd]\r\n        visitedNodes.push(currentNode)\r\n\r\n        // The target node has been reached, return the visited nodes\r\n        if(currentNode === finishNode) {\r\n            return visitedNodes;\r\n        }\r\n\r\n        // Move current Node from open to closed list, and process each of its neighbors\r\n        openList = openList.filter((node) => { return node !== currentNode})\r\n\r\n        closedList.push(currentNode);\r\n        let neighbors = getNeighbors(currentNode, grid, allowDiagonal);\r\n\r\n        for(let i=0; i<neighbors.length; i++) {\r\n            let neighbor = neighbors[i];\r\n            if(closedList.includes(neighbor) || neighbor.isWall) {\r\n                continue; // not a valid node, skip to next neighbor\r\n            }\r\n\r\n            // gScore is the shortest distance from start to current node,\r\n            // we need to check if the path we have arrived at this \r\n            //neighbor is the shortest one we have seen yet\r\n            let gScore = currentNode.g + 1;\r\n            let gScoreIsBest = false;\r\n\r\n            if(!openList.includes(neighbor)) {\r\n                // the first time we visit this node, that means that it is the best\r\n                // Moreover, we need to get the heuristic score (h)\r\n                gScoreIsBest = true;\r\n                neighbor.h = heuristic(neighbor, finishNode, heuristicType);\r\n                openList.push(neighbor);\r\n            } else if(gScore < neighbor.g) {\r\n                gScoreIsBest = true;\r\n            }\r\n\r\n            if(gScoreIsBest) {\r\n                // an potimal path was found\r\n                // update previousNode, f, and g score\r\n                neighbor.previousNode = currentNode;\r\n                neighbor.g = gScore;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                visitedNodes.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Path not found\r\n    return [];\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\n\r\nimport { getNeighbors } from '../helpers/helpers.js'\r\n\r\nexport function bfs(grid, startNode, finishNode, allowDiagonal) {\r\n    let queue = [startNode];\r\n    let visitedNodesInOrder = [];\r\n\r\n    while (queue.length) {\r\n       let currentNode = queue.shift();\r\n       visitedNodesInOrder.push(currentNode);\r\n\r\n       if(currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n       if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\r\n            currentNode.isVisited = true;\r\n            visitedNodesInOrder.push(currentNode);\r\n       \r\n            let neighbors = getNeighbors(currentNode, grid, false)\r\n\r\n            neighbors\r\n            .forEach(neighbor => {\r\n                if(!neighbor.isVisited && !neighbor.isWall) {\r\n                    neighbor.previousNode = currentNode;\r\n                    queue.push(neighbor);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // No path found\r\n    return []\r\n }\r\n\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\n\r\nimport { getNeighbors } from '../helpers/helpers.js'\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n\tconst stack = [startNode];\r\n    const visitedNodesInOrder = [];\r\n\r\n    while (stack.length) {\r\n      const currentNode = stack.pop();\r\n  \r\n      if (currentNode === finishNode) return visitedNodesInOrder;\r\n  \r\n\t  if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\r\n\t\tcurrentNode.isVisited = true;\r\n\t\tvisitedNodesInOrder.push(currentNode);\r\n   \r\n\t\tlet neighbors = getNeighbors(currentNode, grid, false)\r\n\r\n\t\tneighbors\r\n\t\t\t.forEach(neighbor => {\r\n\t\t\t\tif(!neighbor.isVisited) {\r\n\t\t\t\t\tneighbor.previousNode = currentNode;\r\n\t\t\t\t\tstack.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// No path found\r\n\treturn []\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Infos = styled.div`\r\n    position: absolute;\r\n    z-index: 999;\r\n    background: rgba(0,0,0,.4);\r\n    padding: 40px 30px;\r\n    border-radius: 20px;\r\n    width: 350px;\r\n    height: 500px;\r\n    top: 200px;\r\n    right: 70px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    color: #fff;\r\n    font-size: 18px;\r\n    text-transform: capitalize;\r\n    font-weight: 800;\r\n    letter-spacing: 1px;\r\n`;\r\n\r\nconst Close = styled.div`\r\n    color: #4BB543;\r\n    font-size: 15px;\r\n    position: absolute;\r\n    top: 50px;\r\n    right: 40px;\r\n    margin-left: auto;\r\n    font-size: 15px;\r\n    text-transform: lowercase;\r\n    font-weight: 500;\r\n    letter-spacing: .4px;\r\n`;\r\n\r\nconst Description = styled.div`\r\n    letter-spacing: .6px;\r\n    color: rgb(160, 160, 160);\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    margin-top: 40px;\r\n`;\r\n\r\nexport const InfoTab =\r\n    ({handleHideInfos}) => {\r\n        let offsetX, offsetY\r\n        const move = e => {\r\n            const el = e.target\r\n            el.style.left = `${e.pageX - offsetX}px`\r\n            el.style.top = `${e.pageY - offsetY}px`\r\n        }\r\n        const add = e => {\r\n            const el = e.target\r\n            offsetX = e.clientX - el.getBoundingClientRect().left\r\n            offsetY = e.clientY - el.getBoundingClientRect().top\r\n            el.addEventListener('mousemove', move)\r\n        }\r\n        const remove = e => {\r\n            const el = e.target\r\n            el.removeEventListener('mousemove', move)\r\n        }\r\n        \r\n        return (\r\n            <Infos  onMouseDown={add} onMouseUp={remove} >\r\n                <Title>How to use?</Title>\r\n                <Close onClick={handleHideInfos}>hide</Close>\r\n                <Description>On the grid, the start node and the finish node are being displayed. Clicking Visualize button will run the animation of the current selected algorithm.</Description>\r\n                <Description>These nodes can be moved all around the grid, jus by pressing the mouse on the current node and dragging it to the destination.</Description>\r\n                <Description>By clicking on a random grid node, and keeping the mouse pressed, you can draw a wall.(an obstacle for the algorithm)</Description>\r\n                <Description>The reset button will reset just the animated nodes, leaving walls and start/finish nodes untouched. For clearing the walls there is a separate button.</Description>\r\n            </Infos>   \r\n        )\r\n    }","import React from 'react';\r\nimport Select from 'react-select';\r\n\r\nimport '../styles/Navbar.css';\r\n\r\nfunction Navbar(props) {                \r\n    const {clearPath, changeSpeed, runAlgorithm, changeAlgorithm, handleChangeHeuristic, handleChangeDiagonal, clearWalls } = props\r\n    const algorithmOptions = [\r\n        { value: 'Dijkstra', label: 'Dijkstra' },\r\n        { value: 'A*', label: 'A*' },\r\n        { value: 'BFS', label: 'BFS' },\r\n        { value: 'DFS', label: 'DFS' }\r\n    ]\r\n    const speedOptions = [\r\n        { value: '100', label: 'Very Slow' },\r\n        { value: '50', label: 'Slow' },\r\n        { value: '25', label: 'Normal' },\r\n        { value: '10', label: 'Fast' },\r\n        { value: '1', label: 'Very Fast' }\r\n    ]\r\n\r\n    const heuristicOptions = [\r\n        { value: 'euclidean', label: 'Eulcidean' },\r\n        { value: 'manhattan', label: 'Manhattan' },\r\n        { value: 'diagonal', label: 'Diagonal' }\r\n    ]\r\n\r\n    const diagonalOptions = [\r\n        { value: 'true', label: 'true' },\r\n        { value: 'false', label: 'false' }\r\n    ]\r\n\r\n    const handleAlgoChange = selectedOption => {\r\n        changeAlgorithm(selectedOption.value);\r\n    };\r\n\r\n    const handleSpeedChange = selectedOption => {\r\n        changeSpeed(selectedOption.value);\r\n    };\r\n\r\n    const heuristicChange = selectedOption => {\r\n        handleChangeHeuristic(selectedOption.value);\r\n    };\r\n\r\n    const diagonal = (selectedOption) => {\r\n        handleChangeDiagonal(selectedOption.value)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"Navbar\">\r\n                <div className=\"flex wall\" onClick={clearWalls}>\r\n                    <div>Clear Walls</div>\r\n                    <div className=\"walls\"></div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <div>Algo: </div>\r\n                    <Select\r\n                        onChange={handleAlgoChange}\r\n                        options={algorithmOptions}\r\n                        className=\"selectTag\"\r\n                        placeholder={algorithmOptions[0].label}\r\n                        defaultValue={algorithmOptions[0].label}\r\n                    />\r\n                </div>\r\n                <div className=\"flex\">\r\n                <div>A* Heuristic: </div>\r\n                    <Select\r\n                        onChange={heuristicChange}\r\n                        options={heuristicOptions}\r\n                        className=\"selectTag\"\r\n                        placeholder={heuristicOptions[0].label}\r\n                        defaultValue={heuristicOptions[0].label}\r\n                    />\r\n                </div>\r\n                <div className=\"button rounded\" onClick={runAlgorithm}>\r\n                    Visualize\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <div>Speed: </div>\r\n                    <Select\r\n                        onChange={handleSpeedChange}\r\n                        options={speedOptions}\r\n                        className=\"selectTag\"\r\n                        placeholder={speedOptions[2].label}\r\n                        defaultValue={speedOptions[2].label}\r\n                    /> \r\n                </div>\r\n                <div className=\"flex\">\r\n                <div>Allow diagonal search: </div>\r\n                    <Select\r\n                        onChange={diagonal}\r\n                        options={diagonalOptions}\r\n                        className=\"selectTag\"\r\n                        placeholder={diagonalOptions[0].label}\r\n                        defaultValue={diagonalOptions[0].label}\r\n                    />\r\n                </div>\r\n                <div className=\"flex reset\" onClick={clearPath}>\r\n                    <div className=\"icon\"></div>\r\n                    <div className=\"text\">Reset</div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Panel = styled.div`\r\n    position: absolute;\r\n    bottom: 15px;\r\n    left: 44%;\r\n    height: 40px;\r\n    padding: 5px 30px;\r\n    display: inline-block;\r\n    border-radius: 10px;\r\n    background: rgba(0,0,0,0.5);\r\n    color: #ddd;\r\n    z-index: 999;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    color: #ddd;\r\n    font-size: 16px;\r\n    font-weight: 400;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst Description = styled.div`\r\n    color: #4BB543;\r\n    text-transform: lowercase;\r\n    margin-left: 15px;\r\n    font-size: 16px; \r\n    display: inline-block;\r\n    font-weight: 400;\r\n    pointer-events: none;\r\n`;\r\n\r\nexport const TimeTakenPanel = ({timeTaken}) => {\r\n    let offsetX, offsetY\r\n\r\n    const move = e => {\r\n        const el = e.target\r\n        el.style.left = `${e.pageX - offsetX}px`\r\n        el.style.top = `${e.pageY - offsetY}px`\r\n    }\r\n\r\n    const add = e => {\r\n        const el = e.target\r\n        offsetX = e.clientX - el.getBoundingClientRect().left\r\n        offsetY = e.clientY - el.getBoundingClientRect().top\r\n        el.addEventListener('mousemove', move)\r\n    }\r\n    \r\n    const remove = e => {\r\n        const el = e.target\r\n        el.removeEventListener('mousemove', move)\r\n    }\r\n    \r\n    return (\r\n        <Panel  onMouseDown={add} onMouseUp={remove} >\r\n            <Title>\r\n                Time taken: \r\n                <Description>{parseFloat(timeTaken).toFixed(3)} ms</Description>\r\n            </Title>\r\n        </Panel>   \r\n    )\r\n}","import React from 'react'\r\nimport Select from 'react-select';\r\n\r\nimport '../styles/SecondNavbar.css'\r\n\r\nfunction SecondNavbar() {\r\n\r\n    return (\r\n        <div className=\"SecondNavbar\">\r\n            <div className=\"flex button-generate-start\">\r\n                <div className=\"start\"></div>\r\n                <div>Start</div>\r\n            </div>\r\n            <div className=\"flex button-generate-finish\">\r\n                <div className=\"target\"></div>\r\n                <div>Target</div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <div className=\"unvisited\"></div>\r\n                <div>Unvisited Node</div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <div className=\"visited\"></div>\r\n                <div>Visited</div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <div className=\"wall\"></div>\r\n                <div>Wall</div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <div className=\"shortest-path\"></div>\r\n                <div>Shortest-Path</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SecondNavbar\r\n","import Node from \"./Node\";\r\nimport { dijkstra } from '../Algorithms/dijkstra';\r\nimport {aStar} from '../Algorithms/a_star';\r\nimport { bfs } from \"../Algorithms/breadthFirstSearch\";\r\nimport { dfs } from \"../Algorithms/depthFirstSearch\";\r\nimport { backtrackPath } from '../helpers/helpers.js';\r\nimport React, { Component } from 'react';\r\nimport { InfoTab } from './InfoTab';\r\nimport Navbar from './Navbar';\r\nimport {TimeTakenPanel} from './TimeTakenPanel'\r\n\r\nimport '../styles/Grid.css';\r\nimport SecondNavbar from \"./SecondNavbar\";\r\n\r\nconst nodeDimension = 35;\r\n\r\nexport default class Grid extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tgrid: [],\r\n\t\t\tmouseIsPressed: false,\r\n\t\t\trunning: false,\r\n\t\t\tanimationSpeed: 25,\r\n\t\t\talgorithm: 'Dijkstra',\r\n\t\t\tfinished: false,\r\n\t\t\tstartRow: -1,\r\n\t\t\tstartColumn: -1,\r\n\t\t\tfinishRow: -1,\r\n\t\t\tfinishColumn: -1,\r\n\t\t\tstartNodeIsBeingDragged: false,\r\n\t\t\tfinishNodeIsBeingDragged: false,\r\n\t\t\theuristicType: 'euclidean',\r\n\t\t\tallowDiagonal: true,\r\n\t\t\ttimeTaken: 0,\r\n\t\t\tshowInfos: true\r\n\t\t  };\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({ grid: this.getInitialGrid() });\r\n\t}\r\n\r\n\tcreateNode(col, row) {\r\n\t\treturn {\r\n\t\t\tcol,\r\n\t\t\trow,\r\n\t\t\tisStart: row === this.state.startRow && col === this.state.startColumn,\r\n\t\t\tisFinish: row === this.state.finishRow && col === this.state.finishColumn,\r\n\t\t\tdistance: Infinity,\r\n\t\t\tisVisited: false,\r\n\t\t\tisWall: false,\r\n\t\t\tpreviousNode: null,\r\n\t\t\tf: 0,\r\n\t\t\tg: 0,\r\n\t\t\th: 0\r\n\t\t};\r\n\t};\r\n\r\n\tdrawWall(grid, row, col) {\r\n\t\tif(grid[row][col].isWall) return grid;\r\n\t\tconst newGrid = grid.slice();\r\n\t\tnewGrid[row][col].isWall = !newGrid[row][col].isWall;\r\n\t\treturn newGrid;\r\n\t};\r\n\r\n\tgetInitialGrid() {\r\n\t\tconst element = document.querySelector('.Grid');\r\n\t\tconst height = element.clientHeight;\r\n\t\tconst width = element.clientWidth;\r\n\t\tconst numberOfRows = Math.floor(height / nodeDimension);\r\n\t\tconst numberOfColumns = Math.floor(width / nodeDimension);\r\n\t\tconst grid = [];\r\n\r\n\t\tfor (let row = 0; row < numberOfRows; row++) {\r\n\t\t\tconst currentRow = [];\r\n\t\t\tfor (let col = 0; col < numberOfColumns; col++) {\r\n\t\t\t\tcurrentRow.push(this.createNode(col, row));\r\n\t\t\t}\r\n\t\t\tgrid.push(currentRow);\r\n\t\t}\r\n\r\n\t\tconst { startRow, startColumn, finishRow, finishColumn} = this.state;\r\n\t\tif(startRow === -1 || startColumn === -1 || finishRow === -1 || finishColumn === -1 ) {\r\n\t\t\tconst startCoord = {\r\n\t\t\t\tx: Math.floor(numberOfRows/2),\r\n\t\t\t\ty: Math.floor(numberOfColumns/4),\r\n\t\t\t}\r\n\t\t\tconst finishCoord = {\r\n\t\t\t\tx: Math.floor(numberOfRows/2),\r\n\t\t\t\ty: Math.floor(numberOfColumns*3/4)\r\n\t\t\t}\r\n\t\r\n\t\t\tgrid[startCoord.x][startCoord.y].isStart = true;\r\n\t\t\tgrid[finishCoord.x][finishCoord.y].isFinish = true;\r\n\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tstartRow: startCoord.x,\r\n\t\t\t\tstartColumn: startCoord.y,\r\n\t\t\t\tfinishRow: finishCoord.x,\r\n\t\t\t\tfinishColumn: finishCoord.y,\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstartRow,\r\n\t\t\t\tstartColumn,\r\n\t\t\t\tfinishRow,\r\n\t\t\t\tfinishColumn,\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn grid;\r\n\t};\r\n\r\n\thandleMouseDown(row, col) {\r\n\t\tif (this.state.running) return;\r\n\r\n\t\tif (this.state.grid[row][col].isStart) {\r\n\t\t\tthis.setState({mouseIsPressed: true, startNodeIsBeingDragged: true})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.state.grid[row][col].isFinish) {\r\n\t\t\tthis.setState({mouseIsPressed: true, finishNodeIsBeingDragged: true})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!this.state.finished) {\r\n\t\t\tconst newGrid = this.drawWall(this.state.grid, row, col);\r\n\t\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseEnter(row, col) {\r\n\t\tif (!this.state.mouseIsPressed || this.state.running) return;\r\n\r\n\t\tconst { grid } = this.state;\r\n\t\tlet { isFinish, isStart, isWall } = grid[row][col];\r\n\r\n\t\tif (!isFinish && !this.state.finished && !this.state.startNodeIsMoving && !isStart && !this.state.startNodeIsBeingDragged && !this.state.finishNodeIsBeingDragged) {\r\n\t\t\tconst newGrid = this.drawWall(this.state.grid, row, col);\r\n\t\t\tthis.setState({ grid: newGrid });\r\n\t\t}\r\n\r\n\t\tif(this.state.startNodeIsBeingDragged) {\r\n\t\t\tif(isWall) return;\r\n\t\t\t// Get the previous node from the grid, that still has isStart=true, and set it to false\r\n\t\t\tlet previousStartNode = document.querySelector('#dragstart');\r\n\t\t\tif(previousStartNode) {\r\n\t\t\t\tconst prevRow = parseInt(previousStartNode.parentNode.id.split('-')[1]);\r\n\t\t\t\tconst prevCol = parseInt(previousStartNode.parentNode.id.split('-')[2]);\r\n\t\t\t\tif(grid[prevRow][prevCol].isStart)\r\n\t\t\t\t\tgrid[prevRow][prevCol].isStart = false;\r\n\t\t\t}\t\t\r\n\t\t\tgrid[row][col].isStart = true;\r\n\t\t\tthis.setState({grid, startColumn: col, startRow: row });\r\n\t\t}\r\n\r\n\t\tif(this.state.finishNodeIsBeingDragged) {\r\n\t\t\tif(isWall) return;\r\n\t\t\t// Get the previous node from the grid, that still has isFinish=true, and set it to false\r\n\t\t\tlet previousFinishNode = document.querySelector('#dragtarget');\r\n\t\t\tif(previousFinishNode) {\r\n\t\t\t\tconst prevRow = parseInt(previousFinishNode.parentNode.id.split('-')[1]);\r\n\t\t\t\tconst prevCol = parseInt(previousFinishNode.parentNode.id.split('-')[2]);\r\n\t\t\t\tif(grid[prevRow][prevCol].isFinish)\r\n\t\t\t\t\tgrid[prevRow][prevCol].isFinish = false;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tgrid[row][col].isFinish = true;\r\n\t\t\tthis.setState({finishColumn: col, finishRow: row });\r\n\r\n\t\t\t// automatic recomputation\r\n\t\t\tif(this.state.finished) {\r\n\t\t\t\tif (grid[row][col].isWall) return;\r\n\t\t\t\tconst startNode = grid[this.state.startRow][this.state.startColumn];\r\n\t\t\t\tconst finishNode = grid[row][col];\r\n\r\n\t\t\t\tif(this.state.algorithm === 'Dijkstra') {\r\n\t\t\t\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode)\r\n\t\t\t\t\tconst nodesInShortestPathOrder = backtrackPath(finishNode);\r\n\t\t\t\t\tthis.onDragRecomputation(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this.state.algorithm === 'A*') {\r\n\t\t\t\t\tconst visitedNodesInOrder = aStar(grid, startNode, finishNode, this.state.heuristicType, this.state.allowDiagonal)\r\n\t\t\t\t\tconst nodesInShortestPathOrder = backtrackPath(finishNode);\r\n\t\t\t\t\tthis.onDragRecomputation(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this.state.algorithm === 'BFS') {\r\n\t\t\t\t\tconst visitedNodesInOrder = bfs(grid, startNode, finishNode, this.state.allowDiagonal)\r\n\t\t\t\t\tconst nodesInShortestPathOrder = backtrackPath(finishNode);\r\n\t\t\t\t\tthis.onDragRecomputation(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this.state.algorithm === 'DFS') {\r\n\t\t\t\t\tconst visitedNodesInOrder = dfs(grid, startNode, finishNode, this.state.allowDiagonal)\r\n\t\t\t\t\tconst nodesInShortestPathOrder = backtrackPath(finishNode);\r\n\t\t\t\t\tthis.onDragRecomputation(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseUp() {\r\n\t\tthis.setState({ mouseIsPressed: false, startNodeIsBeingDragged: false, finishNodeIsBeingDragged: false });\r\n\t}\r\n\r\n\tonDragRecomputation(visitedNodesInOrder, nodesInShortestPathOrder) {\t\t\r\n\t\t// Remove the class of visited nodes, and add it correctly \r\n\t\t// Remove the class of shortest path nodes, and add it correctly \r\n\t\tconst visitedNodes = document.getElementsByClassName(`Node Node-visited`);\r\n\t\tconst shortestPathNodes = document.getElementsByClassName(`Node Node-shortest-path`);\r\n\r\n\t\tfor (let i=0; i<visitedNodes.length; i++)\r\n\t\t\tvisitedNodes[i].classList.remove('Node-visited');\r\n\t\tfor (let node of visitedNodesInOrder)\r\n\t\t\tdocument.getElementById(`Node-${node.row}-${node.col}`).className = 'Node Node-visited';\r\n\t\tfor(let i=0; i<shortestPathNodes.length; i++) \r\n\t\t\tshortestPathNodes[i].classList.remove('Node-shortest-path')\r\n\t\tfor (let node of nodesInShortestPathOrder)\r\n\t\t\tdocument.getElementById(`Node-${node.row}-${node.col}`).className = 'Node Node-shortest-path';\r\n\t}\r\n\r\n\tcalculatePath() {\r\n\t\tconst {grid, startRow, startColumn, finishRow, finishColumn, algorithm} = this.state;\r\n\t\tconst startNode = grid[startRow][startColumn];\r\n\t\tconst finishNode = grid[finishRow][finishColumn];\r\n\t\tlet start = 0;\r\n\t\tlet finish = 0;\r\n\t\tlet visitedNodesInOrder = [];\r\n\t\tthis.setState({running:true})\r\n\t\tstart = window.performance.now(); // Start measuring time\r\n\r\n\t\tswitch(algorithm) {\r\n\t\t\tcase 'Dijkstra':\r\n\t\t\t\tvisitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n\t\t\t  \tbreak;\r\n\t\t\tcase 'A*':\r\n\t\t\t\tvisitedNodesInOrder = aStar(grid, startNode, finishNode, this.state.heuristicType, this.state.allowDiagonal)\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'BFS':\r\n\t\t\t\tvisitedNodesInOrder = bfs(grid, startNode, finishNode, this.state.allowDiagonal)\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'DFS':\r\n\t\t\t\tvisitedNodesInOrder = dfs(grid, startNode, finishNode, this.state.allowDiagonal)\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"Error\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfinish = window.performance.now(); // Stop measuring time\r\n\t\tconst nodesInShortestPathOrder = backtrackPath(finishNode);\r\n\t\tthis.animateCurrentAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\tif(start && finish)\t\r\n\t\t\tthis.setState({timeTaken: finish-start})\r\n\t}\r\n\r\n\tvisualizeCurrentAlgorithm() {\r\n\t\tif (this.state.running) {\r\n\t\t\talert('Already running!'); \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(this.state.finished) {\r\n\t\t\tthis.resetAll(() => {\r\n\t\t\t\tthis.calculatePath()\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.setState({ running: true }, () => {\r\n\t\t\tif(this.state.startRow === -1 || this.state.startColumn === -1) return;\r\n\t\t\tthis.calculatePath();\r\n\t\t}); \r\n\t}\r\n\r\n\tanimateCurrentAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\t\t\tif (i === visitedNodesInOrder.length) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\r\n\t\t\t\t}, this.state.animationSpeed / 5 * i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst node = visitedNodesInOrder[i];\r\n\t\t\t\tlet element = document.getElementById(`Node-${node.row}-${node.col}`);\r\n\t\t\t\telement.className = 'Node Node-visited';\r\n\t\t\t\telement.style.animationDuration = `${this.state.animationSpeed / 33.3}s`;\r\n\t\t\t}, this.state.animationSpeed / 5 * i);\r\n\t\t}\r\n\t}\r\n\r\n\tasync animateShortestPath(nodesInShortestPathOrder) {\r\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\r\n\t\t\t\tlet element = document.getElementById(`Node-${node.row}-${node.col}`);\r\n\t\t\t\telement.className = 'Node Node-shortest-path';\r\n\t\t\t\telement.style.animationDuration = `${this.state.animationSpeed / 33.3}s`;\r\n\t\t\t}, this.state.animationSpeed * i);\r\n\t\t}\r\n\t\tawait this.setState({\r\n\t\t\trunning: false,\r\n\t\t\tfinished: true\r\n\t\t});\r\n\t}\r\n\r\n\tresetAll(callback) {\r\n\t\tif (this.state.running) {\r\n\t\t\talert('Running!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { grid } = this.state;\r\n\t\tfor(let row=0; row < grid.length; row++) {\r\n\t\t\tfor(let col=0; col < grid[0].length; col++) {\r\n\t\t\t\tgrid[row][col].distance = Infinity; \r\n\t\t\t\tgrid[row][col].isVisited = false; \r\n\t\t\t\tgrid[row][col].previousNode = null; \r\n\t\t\t\tgrid[row][col].f = 0; \r\n\t\t\t\tgrid[row][col].g = 0; \r\n\t\t\t\tgrid[row][col].h = 0; \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tgrid: grid,\r\n\t\t\trunning: false,\r\n\t\t\tfinished: false\r\n\t\t}, () => {\r\n\t\t\tconst visitedNodes = document.querySelectorAll('.Node-visited')\r\n\t\t\tconst shortestPathNodes = document.querySelectorAll('.Node-shortest-path')\r\n\r\n\t\t\t// Clear grid, but let walls\r\n\t\t\tfor(let i=0; i< visitedNodes.length; i++ )\r\n\t\t\t\tvisitedNodes[i].classList.remove('Node-visited');\r\n\t\t\tfor(let i=0; i< shortestPathNodes.length; i++ )\r\n\t\t\t\tshortestPathNodes[i].classList.remove('Node-shortest-path')\r\n\r\n\t\t\ttypeof callback == \"function\" && callback();\r\n\t\t\treturn;\r\n\t\t});\r\n\t}\r\n\r\n\tclearWalls() {\r\n\t\tconsole.log('called')\r\n\t\tif (this.state.running) {\r\n\t\t\talert('Running!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { grid } = this.state;\r\n\t\tfor(let row=0; row < grid.length; row++) {\r\n\t\t\tfor(let col=0; col < grid[0].length; col++) {\r\n\t\t\t\tgrid[row][col].isWall = false; \r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({ grid });\r\n\t}\r\n\r\n\thandleChangeSpeed(speed) {\r\n\t\tthis.setState({ animationSpeed: speed });\r\n\t}\r\n\r\n\thandleChangeAlgorithm(name) {\r\n\t\tthis.setState({ algorithm: name });\r\n\t}\r\n\r\n\thandleChangeHeuristic(heuristic) {\r\n\t\tthis.setState({heuristicType : heuristic})\r\n\t}\r\n\r\n\thandleChangeDiagonal(val) {\r\n\t\tthis.setState({ allowDiagonal: val})\r\n\t}\r\n\r\n\thandleHideInfos() {\r\n\t\tthis.setState({ showInfos: !this.state.showInfos })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { grid, mouseIsPressed, running, showInfos } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"Wrapper\">\r\n\t\t\t\t{showInfos &&\r\n\t\t\t\t\t<InfoTab \r\n\t\t\t\t\t\thandleHideInfos={this.handleHideInfos.bind(this)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</InfoTab>\r\n\t\t\t\t}\r\n\t\t\t\t<Navbar\r\n\t\t\t\t\tclearPath={this.resetAll.bind(this)}\r\n\t\t\t\t\tchangeSpeed={this.handleChangeSpeed.bind(this)}\r\n\t\t\t\t\trunAlgorithm={this.visualizeCurrentAlgorithm.bind(this)}\r\n\t\t\t\t\tchangeAlgorithm={this.handleChangeAlgorithm.bind(this)}\r\n\t\t\t\t\thandleChangeHeuristic={this.handleChangeHeuristic.bind(this)}\r\n\t\t\t\t\thandleChangeDiagonal={this.handleChangeDiagonal.bind(this)}\r\n\t\t\t\t\tclearWalls={this.clearWalls.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<SecondNavbar />\r\n\t\t\t\t<TimeTakenPanel timeTaken={this.state.timeTaken} />\r\n\t\t\t\t<div className=\"Grid\">\r\n\t\t\t\t\t{grid.map((row, rowIndex) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={rowIndex}>\r\n\t\t\t\t\t\t\t\t{row.map((node, nodeIndex) => {\r\n\t\t\t\t\t\t\t\t\tconst { row, col, isFinish, isStart, isWall } = node;\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Node\r\n\t\t\t\t\t\t\t\t\t\t\tkey={nodeIndex}\r\n\t\t\t\t\t\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\t\t\t\t\t\tcol={col}\r\n\t\t\t\t\t\t\t\t\t\t\tisFinish={isFinish}\r\n\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\r\n\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\r\n\t\t\t\t\t\t\t\t\t\t\tisComputing={running}\r\n\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t</Node>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import Grid from \"./Components/Grid\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid></Grid>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}